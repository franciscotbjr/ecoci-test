name: "Carbon Monitoring Action"
description: >
  This action is responsible for capturing energy expenditure analysis data 
  and sending it to Carbon Monitoring Service.
inputs:
  source-type:
    description: "The source of the event, as an instance a CI worflow. Possible values: CI, Container, Workstation."
    required: false
    default: CI
  display-results:
    description: "Whether to print table results in Github worflow execution result UI."
    required: false
    default: false
  application:
    description: "The application name. It may be the same as 'app_name' env from 'standard.yaml' created by PDD."
    required: false
    default: notused
  namespace:
    description: "The namespace of the application. It is 'System, Product or Project' from PDD. It may be the same as 'namespace' env from 'standard.yaml'."
    required: false
    default: notused
  owner:
    description: "The owner of the application. It is 'Domain/ Value Stream' from PDD. It may be the same as 'value_stream' env from 'standard.yaml'."
    required: false
    default: notused
  infra:
    description: "The infra enviorment. Ex: onpremises, aws, azure, gcp"
    required: false
    default: notused
  region:
    description: "The region of infra enviorment. It may be the same as 'aws_region' env from 'standard.yaml'."
    required: false
    default: notused
  task:
    description: "The task to be performed. Possible values: 'initialize-energy-estimation', 'get-measurement' (default) ."
    required: true
    default: get-measurement
  setup-python:
    description: "Use it to run actions/setup-python@v4. If current workflow runner already has python intalled, disable it by setting 'false'. Default is 'true'."
    required: false
    default: true
  carbon-monitoring-service-api:
    description: "URI of Carbon Monitoring Service in PRD"
    required: false
    default: "https://carbon-monitoring-service.arquitetura.grupoboticario.digital/ci"
outputs:
  energy-results:
    description: "The created Energy Results JSON."
    value: ${{ steps.energy-results.outputs.energy-results }}
runs:
  using: "composite"
  steps:
    - name: Setup python
      id: setup-python
      if: ${{ inputs.task == 'initialize-energy-estimation' && inputs.setup-python == 'true' }}
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Initialize Energy Estimation
      id: init-energy-estimation
      if: ${{ inputs.task == 'initialize-energy-estimation' }}
      uses: green-coding-berlin/eco-ci-energy-estimation@v2
      with:
        task: start-measurement
        display-graph: false

    - name: Setup Eco-Ci Measurment
      id: setup-ecoci-measurment
      if: ${{ inputs.task == 'get-measurement' }}
      uses: green-coding-berlin/eco-ci-energy-estimation@v2
      with:
        task: get-measurement
        label: "Eco-Ci setup"
        send-data: false

    - name: Display Eco-Ci Measurment Table
      id: display-ecoci-measurment-table
      if: ${{ inputs.display-results == 'true' && inputs.task == 'get-measurement'}}
      uses: green-coding-berlin/eco-ci-energy-estimation@v2
      with:
        task: display-results
        send-data: false
        display-graph: false
        display-badge: false

    - name: Send Eco-Ci Measurment Results
      id: send-energy-results
      if: ${{ inputs.task == 'get-measurement' }}
      shell: bash
      run: |
        DATE_TIME=$(date +"%Y-%m-%d %H:%M:%S%z");

        cpu_avg_percent=$(echo '${{ steps.display-ecoci-measurment-table.outputs.data-total-json }}' | jq -r '.cpu_avg_percent')
        energy_joules=$(echo '${{ steps.display-ecoci-measurment-table.outputs.data-total-json }}' | jq -r '.energy_joules')
        power_avg_watts=$(echo '${{ steps.display-ecoci-measurment-table.outputs.data-total-json }}' | jq -r '.power_avg_watts')

        ENERGY_RESULTS="{
            \"sourceType\": \"${{ inputs.source-type }}\",
            \"application\": \"${{ inputs.application }}\",
            \"infra\": \"${{ inputs.infra }}\",
            \"region\": \"${{ inputs.region }}\",
            \"namespace\": \"${{ inputs.namespace }}\",
            \"owner\": \"${{ inputs.owner }}\",
            \"datetime\": \"${DATE_TIME}\",
            \"environment\": \"${{ github.job }}\",
            \"data\": {
            \"cpuAvgPercent\": $cpu_avg_percent,
            \"energyJoules\": $energy_joules,
            \"powerAvgWatts\": $power_avg_watts,
            \"repository\": \"${{github.repository}}\",
            \"workflow\": \"$ECO_CI_WORKFLOW_ID\",
            \"runId\": \"${{ github.run_id }}\",
            \"jobId\": \"${{github.job}}\",
            \"commitHash\": \"${{ github.sha }}\",
            \"branch\": \"${{ github.ref_name }}\",
            \"cpuModel\": \"$ECO_CI_MODEL_NAME\",
            \"cpuMake\": \"$ECO_CI_CPU_MAKE\"
            }
        }"

        echo "ENERGY_RESULTS"
        echo $ENERGY_RESULTS

        ENERGY_RESULTS_SL=$(echo "\'$ENERGY_RESULTS\'" | tr '\n' ' ')

        echo "ENERGY_RESULTS_SL"
        echo $ENERGY_RESULTS_SL

        echo "energy-results=\'$ENERGY_RESULTS_SL\'" >> "$GITHUB_OUTPUT";

        echo "curl -X POST \"http://api...\" -H \'Content-Type: application/json\' -d $ENERGY_RESULTS_SL";
